# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Order(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Order()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOrder(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Order
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Order
    def SeqNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Order
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Order
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Order
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Order
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # Order
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Order
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Order
    def Veggies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from CustomAppProto.VeggieOrder import VeggieOrder
            obj = VeggieOrder()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Order
    def Drinks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from CustomAppProto.CansAndBottles import CansAndBottles
            obj = CansAndBottles()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Order
    def Milk(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Milk import Milk
            obj = Milk()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Order
    def MilkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Order
    def MilkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Order
    def Bread(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Bread import Bread
            obj = Bread()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Order
    def BreadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Order
    def BreadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Order
    def Meat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from CustomAppProto.Meat import Meat
            obj = Meat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Order
    def MeatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Order
    def MeatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def OrderStart(builder):
    builder.StartObject(9)

def Start(builder):
    OrderStart(builder)

def OrderAddSeqNo(builder, seqNo):
    builder.PrependUint32Slot(0, seqNo, 0)

def AddSeqNo(builder, seqNo):
    OrderAddSeqNo(builder, seqNo)

def OrderAddTs(builder, ts):
    builder.PrependFloat64Slot(1, ts, 0.0)

def AddTs(builder, ts):
    OrderAddTs(builder, ts)

def OrderAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    OrderAddName(builder, name)

def OrderAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    OrderAddData(builder, data)

def OrderStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems: int) -> int:
    return OrderStartDataVector(builder, numElems)

def OrderAddVeggies(builder, veggies):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(veggies), 0)

def AddVeggies(builder, veggies):
    OrderAddVeggies(builder, veggies)

def OrderAddDrinks(builder, drinks):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(drinks), 0)

def AddDrinks(builder, drinks):
    OrderAddDrinks(builder, drinks)

def OrderAddMilk(builder, milk):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(milk), 0)

def AddMilk(builder, milk):
    OrderAddMilk(builder, milk)

def OrderStartMilkVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMilkVector(builder, numElems: int) -> int:
    return OrderStartMilkVector(builder, numElems)

def OrderAddBread(builder, bread):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(bread), 0)

def AddBread(builder, bread):
    OrderAddBread(builder, bread)

def OrderStartBreadVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartBreadVector(builder, numElems: int) -> int:
    return OrderStartBreadVector(builder, numElems)

def OrderAddMeat(builder, meat):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(meat), 0)

def AddMeat(builder, meat):
    OrderAddMeat(builder, meat)

def OrderStartMeatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMeatVector(builder, numElems: int) -> int:
    return OrderStartMeatVector(builder, numElems)

def OrderEnd(builder):
    return builder.EndObject()

def End(builder):
    return OrderEnd(builder)
