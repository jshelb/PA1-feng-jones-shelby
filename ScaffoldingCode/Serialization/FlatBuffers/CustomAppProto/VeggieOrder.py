# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VeggieOrder(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VeggieOrder()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVeggieOrder(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VeggieOrder
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VeggieOrder
    def Tomato(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VeggieOrder
    def Cucumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VeggieOrder
    def Eggplant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VeggieOrder
    def Broccoli(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VeggieOrder
    def Carrot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # VeggieOrder
    def Onion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def VeggieOrderStart(builder):
    builder.StartObject(6)

def Start(builder):
    VeggieOrderStart(builder)

def VeggieOrderAddTomato(builder, tomato):
    builder.PrependFloat64Slot(0, tomato, 0.0)

def AddTomato(builder, tomato):
    VeggieOrderAddTomato(builder, tomato)

def VeggieOrderAddCucumber(builder, cucumber):
    builder.PrependFloat64Slot(1, cucumber, 0.0)

def AddCucumber(builder, cucumber):
    VeggieOrderAddCucumber(builder, cucumber)

def VeggieOrderAddEggplant(builder, eggplant):
    builder.PrependFloat64Slot(2, eggplant, 0.0)

def AddEggplant(builder, eggplant):
    VeggieOrderAddEggplant(builder, eggplant)

def VeggieOrderAddBroccoli(builder, broccoli):
    builder.PrependFloat64Slot(3, broccoli, 0.0)

def AddBroccoli(builder, broccoli):
    VeggieOrderAddBroccoli(builder, broccoli)

def VeggieOrderAddCarrot(builder, carrot):
    builder.PrependFloat64Slot(4, carrot, 0.0)

def AddCarrot(builder, carrot):
    VeggieOrderAddCarrot(builder, carrot)

def VeggieOrderAddOnion(builder, onion):
    builder.PrependFloat64Slot(5, onion, 0.0)

def AddOnion(builder, onion):
    VeggieOrderAddOnion(builder, onion)

def VeggieOrderEnd(builder):
    return builder.EndObject()

def End(builder):
    return VeggieOrderEnd(builder)
